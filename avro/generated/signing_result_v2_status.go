// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     redeem_request.avsc
 *     redeem_result.avsc
 *     signing_request.avsc
 *     signing_result_v1.avsc
 *     signing_result_v2.avsc
 */
package generated

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SigningResultV2Status int32

const (
	SigningResultV2StatusOk             SigningResultV2Status = 0
	SigningResultV2StatusInvalid_issuer SigningResultV2Status = 1
	SigningResultV2StatusError          SigningResultV2Status = 2
)

func (e SigningResultV2Status) String() string {
	switch e {
	case SigningResultV2StatusOk:
		return "ok"
	case SigningResultV2StatusInvalid_issuer:
		return "invalid_issuer"
	case SigningResultV2StatusError:
		return "error"
	}
	return "unknown"
}

func writeSigningResultV2Status(r SigningResultV2Status, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewSigningResultV2StatusValue(raw string) (r SigningResultV2Status, err error) {
	switch raw {
	case "ok":
		return SigningResultV2StatusOk, nil
	case "invalid_issuer":
		return SigningResultV2StatusInvalid_issuer, nil
	case "error":
		return SigningResultV2StatusError, nil
	}

	return -1, fmt.Errorf("invalid value for SigningResultV2Status: '%s'", raw)

}

func (b SigningResultV2Status) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *SigningResultV2Status) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewSigningResultV2StatusValue(stringVal)
	*b = val
	return err
}

type SigningResultV2StatusWrapper struct {
	Target *SigningResultV2Status
}

func (b SigningResultV2StatusWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b SigningResultV2StatusWrapper) SetInt(v int32) {
	*(b.Target) = SigningResultV2Status(v)
}

func (b SigningResultV2StatusWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b SigningResultV2StatusWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b SigningResultV2StatusWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b SigningResultV2StatusWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b SigningResultV2StatusWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b SigningResultV2StatusWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b SigningResultV2StatusWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b SigningResultV2StatusWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b SigningResultV2StatusWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b SigningResultV2StatusWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b SigningResultV2StatusWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b SigningResultV2StatusWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b SigningResultV2StatusWrapper) Finalize() {}
