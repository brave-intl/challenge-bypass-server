// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     redeem_request.avsc
 *     redeem_result.avsc
 *     signing_request.avsc
 *     signing_result_v1.avsc
 *     signing_result_v2.avsc
 */
package generated

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SigningResultV1 struct {
	Signed_tokens []string `json:"signed_tokens"`

	Issuer_public_key string `json:"issuer_public_key"`

	Proof string `json:"proof"`

	Status SigningResultV1Status `json:"status"`
	// contains METADATA
	Associated_data Bytes `json:"associated_data"`
}

const SigningResultV1AvroCRC64Fingerprint = "6\xfe:\xe0a\xf9\x83\xce"

func NewSigningResultV1() SigningResultV1 {
	r := SigningResultV1{}
	r.Signed_tokens = make([]string, 0)

	return r
}

func DeserializeSigningResultV1(r io.Reader) (SigningResultV1, error) {
	t := NewSigningResultV1()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSigningResultV1FromSchema(r io.Reader, schema string) (SigningResultV1, error) {
	t := NewSigningResultV1()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSigningResultV1(r SigningResultV1, w io.Writer) error {
	var err error
	err = writeArrayString(r.Signed_tokens, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Issuer_public_key, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Proof, w)
	if err != nil {
		return err
	}
	err = writeSigningResultV1Status(r.Status, w)
	if err != nil {
		return err
	}
	err = vm.WriteBytes(r.Associated_data, w)
	if err != nil {
		return err
	}
	return err
}

func (r SigningResultV1) Serialize(w io.Writer) error {
	return writeSigningResultV1(r, w)
}

func (r SigningResultV1) Schema() string {
	return "{\"fields\":[{\"name\":\"signed_tokens\",\"type\":{\"items\":{\"name\":\"signed_token\",\"type\":\"string\"},\"type\":\"array\"}},{\"name\":\"public_key\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"string\"},{\"name\":\"status\",\"type\":{\"name\":\"SigningResultV1Status\",\"symbols\":[\"ok\",\"invalid_issuer\",\"error\"],\"type\":\"enum\"}},{\"doc\":\"contains METADATA\",\"name\":\"associated_data\",\"type\":\"bytes\"}],\"name\":\"brave.cbp.SigningResultV1\",\"type\":\"record\"}"
}

func (r SigningResultV1) SchemaName() string {
	return "brave.cbp.SigningResultV1"
}

func (_ SigningResultV1) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SigningResultV1) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SigningResultV1) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SigningResultV1) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SigningResultV1) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SigningResultV1) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SigningResultV1) SetString(v string)   { panic("Unsupported operation") }
func (_ SigningResultV1) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SigningResultV1) Get(i int) types.Field {
	switch i {
	case 0:
		r.Signed_tokens = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.Signed_tokens}

		return w

	case 1:
		w := types.String{Target: &r.Issuer_public_key}

		return w

	case 2:
		w := types.String{Target: &r.Proof}

		return w

	case 3:
		w := SigningResultV1StatusWrapper{Target: &r.Status}

		return w

	case 4:
		w := BytesWrapper{Target: &r.Associated_data}

		return w

	}
	panic("Unknown field index")
}

func (r *SigningResultV1) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *SigningResultV1) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ SigningResultV1) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SigningResultV1) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SigningResultV1) HintSize(int)                     { panic("Unsupported operation") }
func (_ SigningResultV1) Finalize()                        {}

func (_ SigningResultV1) AvroCRC64Fingerprint() []byte {
	return []byte(SigningResultV1AvroCRC64Fingerprint)
}

func (r SigningResultV1) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["signed_tokens"], err = json.Marshal(r.Signed_tokens)
	if err != nil {
		return nil, err
	}
	output["public_key"], err = json.Marshal(r.Issuer_public_key)
	if err != nil {
		return nil, err
	}
	output["proof"], err = json.Marshal(r.Proof)
	if err != nil {
		return nil, err
	}
	output["status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["associated_data"], err = json.Marshal(r.Associated_data)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SigningResultV1) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["signed_tokens"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Signed_tokens); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for signed_tokens")
	}
	val = func() json.RawMessage {
		if v, ok := fields["public_key"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Issuer_public_key); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for public_key")
	}
	val = func() json.RawMessage {
		if v, ok := fields["proof"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Proof); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for proof")
	}
	val = func() json.RawMessage {
		if v, ok := fields["status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for status")
	}
	val = func() json.RawMessage {
		if v, ok := fields["associated_data"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Associated_data); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for associated_data")
	}
	return nil
}
