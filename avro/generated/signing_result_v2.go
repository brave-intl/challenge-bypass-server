// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     redeem_request.avsc
 *     redeem_result.avsc
 *     signing_request.avsc
 *     signing_result_v1.avsc
 *     signing_result_v2.avsc
 */
package generated

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type SigningResultV2 struct {
	Signed_tokens []string `json:"signed_tokens"`

	Issuer_public_key string `json:"issuer_public_key"`

	Proof string `json:"proof"`

	Valid_from *UnionNullString `json:"valid_from"`

	Valid_to *UnionNullString `json:"valid_to"`

	Status SigningResultV2Status `json:"status"`
	// contains METADATA
	Associated_data Bytes `json:"associated_data"`
}

const SigningResultV2AvroCRC64Fingerprint = "\xcak\xe3\xff\xe5\x0f\x1d\xc4"

func NewSigningResultV2() SigningResultV2 {
	r := SigningResultV2{}
	r.Signed_tokens = make([]string, 0)

	r.Valid_from = nil
	r.Valid_to = nil
	return r
}

func DeserializeSigningResultV2(r io.Reader) (SigningResultV2, error) {
	t := NewSigningResultV2()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeSigningResultV2FromSchema(r io.Reader, schema string) (SigningResultV2, error) {
	t := NewSigningResultV2()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeSigningResultV2(r SigningResultV2, w io.Writer) error {
	var err error
	err = writeArrayString(r.Signed_tokens, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Issuer_public_key, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Proof, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Valid_from, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Valid_to, w)
	if err != nil {
		return err
	}
	err = writeSigningResultV2Status(r.Status, w)
	if err != nil {
		return err
	}
	err = vm.WriteBytes(r.Associated_data, w)
	if err != nil {
		return err
	}
	return err
}

func (r SigningResultV2) Serialize(w io.Writer) error {
	return writeSigningResultV2(r, w)
}

func (r SigningResultV2) Schema() string {
	return "{\"fields\":[{\"name\":\"signed_tokens\",\"type\":{\"items\":{\"name\":\"signed_token\",\"type\":\"string\"},\"type\":\"array\"}},{\"name\":\"issuer_public_key\",\"type\":\"string\"},{\"name\":\"proof\",\"type\":\"string\"},{\"default\":null,\"name\":\"valid_from\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"valid_to\",\"type\":[\"null\",\"string\"]},{\"name\":\"status\",\"type\":{\"name\":\"SigningResultV2Status\",\"symbols\":[\"ok\",\"invalid_issuer\",\"error\"],\"type\":\"enum\"}},{\"doc\":\"contains METADATA\",\"name\":\"associated_data\",\"type\":\"bytes\"}],\"name\":\"brave.cbp.SigningResultV2\",\"type\":\"record\"}"
}

func (r SigningResultV2) SchemaName() string {
	return "brave.cbp.SigningResultV2"
}

func (_ SigningResultV2) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ SigningResultV2) SetInt(v int32)       { panic("Unsupported operation") }
func (_ SigningResultV2) SetLong(v int64)      { panic("Unsupported operation") }
func (_ SigningResultV2) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ SigningResultV2) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ SigningResultV2) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ SigningResultV2) SetString(v string)   { panic("Unsupported operation") }
func (_ SigningResultV2) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *SigningResultV2) Get(i int) types.Field {
	switch i {
	case 0:
		r.Signed_tokens = make([]string, 0)

		w := ArrayStringWrapper{Target: &r.Signed_tokens}

		return w

	case 1:
		w := types.String{Target: &r.Issuer_public_key}

		return w

	case 2:
		w := types.String{Target: &r.Proof}

		return w

	case 3:
		r.Valid_from = NewUnionNullString()

		return r.Valid_from
	case 4:
		r.Valid_to = NewUnionNullString()

		return r.Valid_to
	case 5:
		w := SigningResultV2StatusWrapper{Target: &r.Status}

		return w

	case 6:
		w := BytesWrapper{Target: &r.Associated_data}

		return w

	}
	panic("Unknown field index")
}

func (r *SigningResultV2) SetDefault(i int) {
	switch i {
	case 3:
		r.Valid_from = nil
		return
	case 4:
		r.Valid_to = nil
		return
	}
	panic("Unknown field index")
}

func (r *SigningResultV2) NullField(i int) {
	switch i {
	case 3:
		r.Valid_from = nil
		return
	case 4:
		r.Valid_to = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ SigningResultV2) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ SigningResultV2) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ SigningResultV2) HintSize(int)                     { panic("Unsupported operation") }
func (_ SigningResultV2) Finalize()                        {}

func (_ SigningResultV2) AvroCRC64Fingerprint() []byte {
	return []byte(SigningResultV2AvroCRC64Fingerprint)
}

func (r SigningResultV2) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["signed_tokens"], err = json.Marshal(r.Signed_tokens)
	if err != nil {
		return nil, err
	}
	output["issuer_public_key"], err = json.Marshal(r.Issuer_public_key)
	if err != nil {
		return nil, err
	}
	output["proof"], err = json.Marshal(r.Proof)
	if err != nil {
		return nil, err
	}
	output["valid_from"], err = json.Marshal(r.Valid_from)
	if err != nil {
		return nil, err
	}
	output["valid_to"], err = json.Marshal(r.Valid_to)
	if err != nil {
		return nil, err
	}
	output["status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["associated_data"], err = json.Marshal(r.Associated_data)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *SigningResultV2) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["signed_tokens"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Signed_tokens); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for signed_tokens")
	}
	val = func() json.RawMessage {
		if v, ok := fields["issuer_public_key"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Issuer_public_key); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for public_key")
	}
	val = func() json.RawMessage {
		if v, ok := fields["proof"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Proof); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for proof")
	}
	val = func() json.RawMessage {
		if v, ok := fields["valid_from"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Valid_from); err != nil {
			return err
		}
	} else {
		r.Valid_from = NewUnionNullString()

		r.Valid_from = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["valid_to"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Valid_to); err != nil {
			return err
		}
	} else {
		r.Valid_to = NewUnionNullString()

		r.Valid_to = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for status")
	}
	val = func() json.RawMessage {
		if v, ok := fields["associated_data"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Associated_data); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for associated_data")
	}
	return nil
}
