// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCES:
 *     orig_signing_result.avsc
 *     redeem_request.avsc
 *     redeem_result.avsc
 *     signing_request.avsc
 *     signing_result.avsc
 */
package generated

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type OriginalSigningResultStatus int32

const (
	OriginalSigningResultStatusOk             OriginalSigningResultStatus = 0
	OriginalSigningResultStatusInvalid_issuer OriginalSigningResultStatus = 1
	OriginalSigningResultStatusError          OriginalSigningResultStatus = 2
)

func (e OriginalSigningResultStatus) String() string {
	switch e {
	case OriginalSigningResultStatusOk:
		return "ok"
	case OriginalSigningResultStatusInvalid_issuer:
		return "invalid_issuer"
	case OriginalSigningResultStatusError:
		return "error"
	}
	return "unknown"
}

func writeOriginalSigningResultStatus(r OriginalSigningResultStatus, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewOriginalSigningResultStatusValue(raw string) (r OriginalSigningResultStatus, err error) {
	switch raw {
	case "ok":
		return OriginalSigningResultStatusOk, nil
	case "invalid_issuer":
		return OriginalSigningResultStatusInvalid_issuer, nil
	case "error":
		return OriginalSigningResultStatusError, nil
	}

	return -1, fmt.Errorf("invalid value for OriginalSigningResultStatus: '%s'", raw)

}

func (b OriginalSigningResultStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(b.String())
}

func (b *OriginalSigningResultStatus) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewOriginalSigningResultStatusValue(stringVal)
	*b = val
	return err
}

type OriginalSigningResultStatusWrapper struct {
	Target *OriginalSigningResultStatus
}

func (b OriginalSigningResultStatusWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b OriginalSigningResultStatusWrapper) SetInt(v int32) {
	*(b.Target) = OriginalSigningResultStatus(v)
}

func (b OriginalSigningResultStatusWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b OriginalSigningResultStatusWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b OriginalSigningResultStatusWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b OriginalSigningResultStatusWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b OriginalSigningResultStatusWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b OriginalSigningResultStatusWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b OriginalSigningResultStatusWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b OriginalSigningResultStatusWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b OriginalSigningResultStatusWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b OriginalSigningResultStatusWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b OriginalSigningResultStatusWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b OriginalSigningResultStatusWrapper) HintSize(int) {
	panic("Unable to hint size in int field")
}

func (b OriginalSigningResultStatusWrapper) Finalize() {}
